/*
 * Copyright 2020 Jeremy KUHN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.winterframework.mod.configuration;

import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import reactor.core.publisher.Mono;

/**
 * <p>
 * Base implementation for generated configuration loader.
 * </p>
 * 
 * <p>
 * {@link ConfigurationLoaderSupport} implementations are generated by the
 * winter configuration compiler and loads configuration properties explicitly
 * invoking generated configurator and builder to eventually load the
 * configuration.
 * </p>
 * 
 * <p>
 * This configuration loader works as follows:
 * </p>
 * 
 * <p>
 * If a configuration source is specified:
 * </p>
 * 
 * <ol>
 *   <li>Loads a list of properties from the configuration source</li>
 *   <li>Maps the resulting query results to a configurer whose role is to inject
 * the appropriate property values in a configurator specific to the
 * configuration to load</li>
 *   <li>Invokes a configuration creator which uses the previous configurator to
 * create the configuration</li>
 * </ol>
 * 
 * <p>
 * If no configuration is specified, fallback to a default configuration
 * supplier to create the configuration.
 * </p>
 * 
 * @author <a href="mailto:jeremy.kuhn@winterframework.io">Jeremy Kuhn</a>
 * @since 1.0
 *
 * @see Configuration
 * 
 * @param <A> the configuration type
 * @param <B> the configurator type
 * @param <C> the configuration loader type
 */
public abstract class ConfigurationLoaderSupport<A, B, C extends ConfigurationLoaderSupport<A, B, C>> extends AbstractConfigurationLoader<A, C> {

	private Supplier<A> defaultConfigurationSupplier;
	private String[] properties;
	private Function<List<? extends ConfigurationQueryResult<?,?>>, Consumer<B>> resultsToConfigurer;
	private Function<Consumer<B>, A> configurationCreator;
	
	private Consumer<B> configurer;
	
	/**
	 * <p>
	 * Creates a configuration loader that loads the specified list of properties
	 * and uses the specified results to configurer mapper and configuration creator
	 * function to create the configuration object.
	 * </p>
	 * 
	 * @param properties                   a list of property names to load
	 * @param resultsToConfigurer          a mapper function that maps the
	 *                                     configuration query results to a
	 *                                     configurer
	 * @param configurationCreator         a configuration creator
	 * @param defaultConfigurationSupplier a default configuration supplier
	 */
	public ConfigurationLoaderSupport(String[] properties, Function<List<? extends ConfigurationQueryResult<?,?>>, Consumer<B>> resultsToConfigurer, Function<Consumer<B>, A> configurationCreator, Supplier<A> defaultConfigurationSupplier) {
		this.defaultConfigurationSupplier = defaultConfigurationSupplier;
		this.properties = properties;
		this.resultsToConfigurer = resultsToConfigurer;
		this.configurationCreator = configurationCreator;
	}
	
	/**
	 * <p>
	 * Sets a configurer that will override the configurer supplied when creating
	 * the loader when loading the configuration.
	 * </p>
	 * 
	 * @param configurer a configurer
	 * @return the configuration loader
	 */
	@SuppressWarnings("unchecked")
	public C withConfigurer(Consumer<B> configurer) {
		this.configurer = configurer;
		return (C)this;
	}
	
	@Override
	public Mono<A> load() {
		if(this.source != null) {
			return this.source
				.get(this.properties)
				.withParameters(this.parameters)
				.execute()
				.collectList()
				.map(this.resultsToConfigurer)
				.map(configurer -> (this.configurer != null ? configurer.andThen(this.configurer) : configurer))
				.map(this.configurationCreator);
		}
		else {
			return Mono.fromSupplier(this.defaultConfigurationSupplier);
		}
	}
	
	/**
	 * <p>Base implementation to generate configuration loader beans.</p>
	 * 
	 * @author <a href="mailto:jeremy.kuhn@winterframework.io">Jeremy Kuhn</a>
	 * @since 1.0
	 *
	 * @param <A> the configuration type
	 * @param <B> the configurator type
	 * @param <C> the configuration loader type
	 */
	protected static class ConfigurationBeanSupport<A, B, C extends ConfigurationLoaderSupport<A,B,C>> implements Supplier<A> {
		
		/**
		 * The configuration loader.
		 */
		protected C loader;
		
		private Mono<A> mono;
		
		/**
		 * <p>
		 * Creates a configuration bean.
		 * </p>
		 * 
		 * @param loader the configuration loader
		 */
		public ConfigurationBeanSupport(C loader) {
			this.loader = loader;
		}
		
		@Override
		public A get() {
			if(this.mono == null) {
				this.mono = this.loader.load();
			}
			return this.mono.block();
		}
	}
}
